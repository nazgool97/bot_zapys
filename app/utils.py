import threading
# –Ø–∫—â–æ –±–∞—á–∏—Ç–µ –ø–æ–º–∏–ª–∫—É "Import 'schedule' could not be resolved", –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ø–∞–∫–µ—Ç:
# pip install schedule
try:
    import schedule
except ImportError:
    raise ImportError("–ú–æ–¥—É–ª—å 'schedule' –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —á–µ—Ä–µ–∑ 'pip install schedule'.")

import time
# –Ø–∫—â–æ –±–∞—á–∏—Ç–µ –ø–æ–º–∏–ª–∫—É "Import 'dateutil.parser' could not be resolved from source", –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ø–∞–∫–µ—Ç:
# pip install python-dateutil
try:
    from dateutil.parser import parse
except ImportError:
    raise ImportError("–ú–æ–¥—É–ª—å 'python-dateutil' –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —á–µ—Ä–µ–∑ 'pip install python-dateutil'.")
import datetime
from app.db import get_all_records, delete_record, get_waitlist, config, add_to_waitlist, MASTERS, delete_from_waitlist


try:
    from telebot import types
except ImportError:
    raise ImportError("–ú–æ–¥—É–ª—å 'pyTelegramBotAPI' –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —á–µ—Ä–µ–∑ 'pip install pyTelegramBotAPI'.")

# –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
MONTH_NAMES = {
    1: "–°—ñ—á–µ–Ω—å", 2: "–õ—é—Ç–∏–π", 3: "–ë–µ—Ä–µ–∑–µ–Ω—å", 4: "–ö–≤—ñ—Ç–µ–Ω—å",
    5: "–¢—Ä–∞–≤–µ–Ω—å", 6: "–ß–µ—Ä–≤–µ–Ω—å", 7: "–õ–∏–ø–µ–Ω—å", 8: "–°–µ—Ä–ø–µ–Ω—å",
    9: "–í–µ—Ä–µ—Å–µ–Ω—å", 10: "–ñ–æ–≤—Ç–µ–Ω—å", 11: "–õ–∏—Å—Ç–æ–ø–∞–¥", 12: "–ì—Ä—É–¥–µ–Ω—å"
}

# –†–∞–±–æ—á–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (0=–ü–Ω, 6=–ù–¥)
WORKING_WEEKDAYS = [0, 1, 2, 3, 4, 5]  # –ü–Ω‚Äì–°–±

def start_reminders(bot):
    schedule.every(1).minutes.do(schedule_reminders, bot=bot)
    threading.Thread(target=reminder_loop, daemon=True).start()

def schedule_reminders(bot):
    delta = config.get('reminder_minutes_before', 60) if config else 60
    now = datetime.datetime.now()
    records = get_all_records()
    for key, data in records.items():
        try:
            service, master, y, m, d, tm = key.split('|')
            appt = parse(f"{y}-{m}-{d} {tm}")
            if appt < now:
                # –ê–≤—Ç–æ-—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–ª–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
                delete_record(key)
                request_feedback(bot, key, data['id'])  # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ü–µ–Ω–∫—É
                continue
            remind_at = appt - datetime.timedelta(minutes=delta)
            if remind_at <= now < remind_at + datetime.timedelta(seconds=60):
                bot.send_message(data['id'],
                                 f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ {service} –æ {tm} {d}.{m}.{y}. –Ü–º'—è: {data['name']}")
        except ValueError as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏ –≤ –∫–ª—é—á—ñ {key}: {e}")

def reminder_loop():
    while True:
        schedule.run_pending()
        time.sleep(1)

def request_feedback(bot, key, user_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"feedback_{key}"))
    bot.send_message(user_id, "–í–∏–∑–∏—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤?", reply_markup=kb)

def offer_waitlist(bot, chat_id, key):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–í—Å—Ç–∞—Ç–∏ –≤ –æ—á–µ—Ä–µ–¥—å", callback_data=f"wait_{key}"))
    bot.send_message(chat_id, "–≠—Ç–æ—Ç —Å–ª–æ—Ç –∑–∞–Ω—è—Ç. –•–æ—Ç–∏—Ç–µ –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å?", reply_markup=kb)

def handle_waitlist(bot, call):
    key = call.data[5:]
    username = f"@{call.from_user.username}" if call.from_user.username else "–ë–µ–∑ username"
    add_to_waitlist(key, call.from_user.id, username, "")
    bot.send_message(call.message.chat.id, "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å. –Ø–∫ —Ç—ñ–ª—å–∫–∏ —Å–ª–æ—Ç –∑–≤—ñ–ª—å–Ω–∏—Ç—å—Å—è ‚Äî –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")

def notify_waitlist(bot, key):
    waiters = get_waitlist(key)
    if waiters:
        user_id, username, name = waiters[0]
        try:
            service, master, *_ = key.split('|')
            master_info = config['services'][service]['masters'].get(master)
            master_id = master_info['id'] if master_info and 'id' in master_info else None
            if master_id:
                bot.send_message(master_id, f"–°–ª–æ—Ç {key} –∑–≤—ñ–ª—å–Ω–∏–≤—Å—è! –ö–ª—ñ—î–Ω—Ç {username} –º–æ–∂–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è.")
        except Exception:
            pass
        bot.send_message(user_id, f"–°–ª–æ—Ç {key} –∑–≤—ñ–ª—å–Ω–∏–≤—Å—è! –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è.")
        # –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ —á–µ—Ä–≥–∏
        delete_from_waitlist(key, user_id)

def confirm_kb():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="confirm_yes"))
    kb.add(types.InlineKeyboardButton("‚ùå –ù—ñ", callback_data="confirm_no"))
    return kb



from cryptography.fernet import Fernet
import base64

def generate_encryption_key():
    return Fernet.generate_key()

def encrypt_token(token, key):
    fernet = Fernet(key)
    encrypted = fernet.encrypt(token.encode())
    return base64.urlsafe_b64encode(encrypted).decode()

def decrypt_token(encrypted_token, key):
    fernet = Fernet(key)
    decrypted = fernet.decrypt(base64.urlsafe_b64decode(encrypted_token))
    return decrypted.decode()

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
def encrypt_data(data, key):
    """–®–∏—Ñ—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É data —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–∞ key."""
    fernet = Fernet(key)
    encrypted = fernet.encrypt(data.encode())
    return base64.urlsafe_b64encode(encrypted).decode()

def decrypt_data(encrypted_data, key):
    """–î–µ—à–∏—Ñ—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É encrypted_data —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–∞ key."""
    fernet = Fernet(key)
    decrypted = fernet.decrypt(base64.urlsafe_b64decode(encrypted_data))
    return decrypted.decode()

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –º–∞—Å—Ç–µ—Ä–∞ ---

def master_schedule_kb(master, date=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –º–∞—Å—Ç–µ—Ä–∞."""
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", callback_data=f"addslot_{master}_{date or ''}"))
    kb.add(types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç", callback_data=f"delslot_{master}_{date or ''}"))
    kb.add(types.InlineKeyboardButton("üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"showsched_{master}_{date or ''}"))
    return kb

def handle_master_schedule_command(bot, call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –º–∞—Å—Ç–µ—Ä–∞."""
    data = call.data
    if data.startswith("addslot_"):
        _, master, date = data.split("_", 2)
        # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î)
        bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞ ({date}):")
        # –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ –±–æ—Ç–∞
    elif data.startswith("delslot_"):
        _, master, date = data.split("_", 2)
        # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
        bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ({date}):")
    elif data.startswith("showsched_"):
        _, master, date = data.split("_", 2)
        # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
        # –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ—Ç—ã –∏–∑ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(call.message.chat.id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ {master} –Ω–∞ {date}: ...")
    else:
        bot.send_message(call.message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.")